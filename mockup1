// You can use any (4 or) 5 pins 
#define sclk 13
#define mosi 11
#define dc   10
#define cs   8
#define rst  9

// Color definitions
#define	BLACK           0x0000
#define	BLUE            0x001F
#define	RED             0xF800
#define	GREEN           0x07E0
#define CYAN            0x07FF
#define MAGENTA         0xF81F
#define YELLOW          0xFFE0  
#define WHITE           0xFFFF
#define TEST1           0x0C56 //dark teal
#define TEST2           0xFA5E //pink

#include <Adafruit_GFX.h>
#include <Adafruit_SSD1351.h>
#include <SPI.h>

// Option 1: use any pins but a little slower
//Adafruit_SSD1351 tft = Adafruit_SSD1351(cs, dc, mosi, sclk, rst);  

// Option 2: must use the hardware SPI pins 
// (for UNO thats sclk = 13 and sid = 11) and pin 10 must be 
// an output. This is much faster - also required if you want
// to use the microSD card (see the image drawing example)
Adafruit_SSD1351 tft = Adafruit_SSD1351(cs, dc, rst);

void fillpixelbypixel(uint16_t color) {
  for (uint8_t x=0; x < tft.width(); x++) {
    for (uint8_t y=0; y < tft.height(); y++) {
      tft.drawPixel(x, y, color);
    }
  }
  delay(100);
}

void setup(void) {
  tft.begin();
  tft.fillScreen(BLACK);

  
  //kWh measure
  tft.setCursor(0, 0);
  tft.setTextColor(WHITE);
  tft.setTextSize(4);
  tft.println("24.3");
  tft.setCursor(80, 30);
  tft.setTextSize(1);
  tft.print("kWh");
  
   //SOC
  tft.setCursor(5,70);
  tft.setTextSize(3);
  tft.setTextColor(WHITE);
  tft.print("97.4");
  tft.setCursor(80,85);
  tft.setTextSize(1);
  tft.print("%SOC");
  
  //current graphs
  tft.fillRect(120, 0, 8, 50, GREEN); //regen in
  tft.fillRect(117, 0, 2, 75, YELLOW); //avalible regen
  tft.fillRect(107, 50, 8, 75, TEST1); //power out

   //Voltage measure
  tft.setCursor(20,50);
  tft.setTextSize(2);
  tft.print("378 ");
  tft.setTextSize(1);
  tft.setCursor(60,57);
  tft.print("Volts");
  tft.fillRect(2, 45, 53, 3, GREEN);
  tft.fillRect(50, 45, 25, 3, YELLOW);
  tft.fillRect(70, 45, 25, 3, RED);
  tft.fillTriangle(42, 42, 38, 38, 46, 38, WHITE);

  //Tire Pressure
  tft.setCursor(0,113);
  tft.setTextSize(2);
  tft.print("42.8");
  tft.setCursor(50,120);
  tft.setTextSize(1);
  tft.print("PSI");
 
  //Climate
  tft.setCursor(0,95);
  tft.setTextSize(2);
  tft.print("CC off");
  delay(10000); // AC on
  tft.fillRect(0, 95, 103, 15, BLACK);
  tft.setCursor(0,95);
  tft.setTextColor(BLUE);
  tft.print("AC");
  tft.setCursor(25,95);
  tft.print(".95");
  tft.setCursor(63,102);
  tft.setTextSize(1);
  tft.print("kW");
  delay(3000); //heat
  tft.fillRect(0, 95, 103, 15, BLACK);
  tft.setCursor(0,95);
  tft.setTextSize(2);
  tft.setTextColor(RED);
  tft.print("H");
  tft.setCursor(13,95);
  tft.print("5.7");
  tft.setTextSize(1);
  tft.setCursor(48,102);
  tft.print("kW");
  tft.setCursor(62,95);
  tft.setTextSize(2);
  tft.print("105");
  tft.setTextSize(1);
  tft.setCursor(100,102);
  tft.print("F");
  delay(3000); //combo ac/heat
  tft.fillRect(0, 95, 105, 15, BLACK); //CHANGE RECT FOR ALL CASES!
  tft.setCursor(0,95);
  tft.setTextSize(2);
  tft.setTextColor(BLUE);
  tft.print("A");
  tft.setCursor(13,95);
  tft.print(".60");
  tft.setCursor(55,95);
  tft.setTextColor(RED);
  tft.print("H"); 
  tft.setCursor(69,95);
  tft.print("3.2");  
  //Left turn signal indicator- invert display
  delay(10000);
  tft.invert(true);
  delay(1000);
  tft.invert(false);
  delay(1000);
  tft.invert(true);
  delay(1000);
  tft.invert(false);

 /*
  tft.setTextColor(MAGENTA);
  tft.setTextSize(2);
  tft.setCursor(0, 0);
  tft.println("I love you");
  tft.setCursor(0, 20);
  tft.print("Jennifer");
  */
  
  
  
  
}

void loop() {
}
